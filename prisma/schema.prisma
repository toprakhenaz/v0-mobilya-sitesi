// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Kullanıcı modeli
model User {
  id         String   @id @default(uuid())
  email      String   @unique
  first_name String?
  last_name  String?
  phone      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  orders        Order[]
  addresses     Address[]
  wishlist_items WishlistItem[]
  cart_items    CartItem[]

  @@map("users")
}

// Kategori modeli
model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  image_url   String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

// Ürün modeli
model Product {
  id                  Int      @id @default(autoincrement())
  name                String
  slug                String   @unique
  description         String?
  price               Float
  original_price      Float?
  discount_percentage Int?
  is_new              Boolean  @default(false)
  is_on_sale          Boolean  @default(false)
  stock               Int      @default(0)
  category_id         Int
  image_urls          String?  // JSON olarak saklanacak
  features            String?  // JSON olarak saklanacak
  specifications      String?  // JSON olarak saklanacak
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  category       Category        @relation(fields: [category_id], references: [id])
  order_items    OrderItem[]
  cart_items     CartItem[]
  wishlist_items WishlistItem[]
  product_images ProductImage[]

  @@map("products")
}

// Ürün resmi modeli
model ProductImage {
  id         Int     @id @default(autoincrement())
  product_id Int
  url        String
  is_primary Boolean @default(false)

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Sipariş modeli
model Order {
  id                  Int      @id @default(autoincrement())
  user_id             String?
  guest_email         String?
  total_amount        Float
  status              String   @default("pending") // pending, processing, shipped, delivered, cancelled
  payment_method      String   @default("bank_transfer")
  payment_status      String   @default("pending") // pending, completed
  shipping_address    String
  shipping_city       String
  shipping_postal_code String
  shipping_country    String
  contact_phone       String
  tracking_number     String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user        User?       @relation(fields: [user_id], references: [id])
  order_items OrderItem[]

  @@map("orders")
}

// Sipariş öğesi modeli
model OrderItem {
  id         Int   @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Float

  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id])

  @@map("order_items")
}

// Adres modeli
model Address {
  id          Int     @id @default(autoincrement())
  user_id     String
  title       String
  full_name   String
  address     String
  city        String
  postal_code String
  country     String
  phone       String
  is_default  Boolean @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Sepet öğesi modeli
model CartItem {
  id         Int      @id @default(autoincrement())
  user_id    String
  product_id Int
  quantity   Int
  created_at DateTime @default(now())

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id])

  @@map("cart_items")
}

// Favori öğesi modeli
model WishlistItem {
  id         Int      @id @default(autoincrement())
  user_id    String
  product_id Int
  created_at DateTime @default(now())

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id])

  @@unique([user_id, product_id])
  @@map("wishlist_items")
}

// Hero slayt modeli
model HeroSlide {
  id          Int     @id @default(autoincrement())
  image_url   String
  title       String
  subtitle    String?
  description String?
  order_index Int     @default(0)
  is_active   Boolean @default(true)

  @@map("hero_slides")
}

// Site ayarları modeli
model SiteSetting {
  key   String @id
  value String

  @@map("site_settings")
}

// Admin kullanıcı modeli
model AdminUser {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password_hash String
  full_name     String
  is_super_admin Boolean  @default(false)
  last_login    DateTime?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("admin_users")
}
